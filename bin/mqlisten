// 监听rabbit的数据流，直接传达到 webhooks 时间处理
/***
 * Created by hvail on 2018/9/12.
 ***/
let mq = require('hvail-rabbitmq');
let mqClient = mq.MqCustom;
const {util: apiUtil} = require('api-base-hvail');
const exPattern = /^Mileage_Timer_(\d{1,16})$/;
const _env = process.env || {};
const area = _env.DATAAREA || "zh-cn";
const host = _env.MQ_RABBIT_HOST || "127.0.0.1",
    name = _env.MQ_RABBIT_NAME || "admin",
    pwd = _env.MQ_RABBIT_PASSWORD || "admin";
const changeEvent = "hyz.fanout.event";
const changeLocal = "hyz.fanout.position";
const changePower = "hyz.fanout.power";
const changeNetwork = "hyz.fanout.connection";
const log4js = require('log4js');
const lisStart = _env.LISTEN_START || null;

log4js.configure({
    appenders: {
        cheese: {
            type: 'dateFile',
            filename: '/usr/log/webhook/trigger',
            pattern: '-yyMMdd.log',
            alwaysIncludePattern: true
        }
    },
    categories: {default: {appenders: ['cheese'], level: 'info'}},
    replaceConsole: true
});

let logger = log4js.getLogger('normal');

let listenEventMsg = (msg, type) => {
    let tag = msg.fields.routingKey;
    tag = tag.replace(changeEvent, "").substr(1);
    if (!lisStart || tag.indexOf(lisStart) === 0) {
        let es = JSON.parse(msg.content.toString());
        if (!Array.isArray(es)) es = [es];
        for (let i = 0; i < es.length; i++) {
            eve = es[i];
            apiUtil.PromisePost(`http://webhook.${area}.sky1088.com/event`, eve)
                .then(result => {
                    logger.info(result + " ::> " + tag + ":" + msg.content);
                    console.log(result + " ::> " + tag + ":" + msg.content);
                })
                .catch(console.log);
        }
    }
};

let listenPositionMsg = (msg, type) => {
    let tag = msg.fields.routingKey;
    tag = tag.replace(changeLocal, "").substr(1);
    if (!lisStart || tag.indexOf(lisStart) === 0) {
        apiUtil.PromisePost(`http://webhook.${area}.sky1088.com/position`, JSON.parse(msg.content.toString()))
            .then(result => {
                logger.info(result + " ::> " + tag + " : " + msg.content);
                console.log(result + " ::> " + tag + " : " + msg.content);
            })
            .catch(console.log);
    }
};

let listenPowerMsg = (msg, type) => {
    let tag = msg.fields.routingKey;
    tag = tag.replace(changePower, "").substr(1);
    if (!lisStart || tag.indexOf(lisStart) === 0) {
        let eve = JSON.parse(msg.content.toString());
        apiUtil.PromisePost(`http://webhook.${area}.sky1088.com/power`, eve)
            .then(result => {
                logger.info(result + " ::> " + tag + ":" + JSON.stringify(eve));
                console.log(result + " ::> " + tag + ":" + JSON.stringify(eve));
            })
            .catch(console.log);
    }
};

let listenNetworkMsg = (msg, type) => {
    let tag = msg.fields.routingKey;
    tag = tag.replace(changePower, "").substr(1);
    if (!lisStart || tag.indexOf(lisStart) === 0) {
        let eve = JSON.parse(msg.content.toString());
        apiUtil.PromisePost(`http://webhook.${area}.sky1088.com/network`, eve)
            .catch(console.log);
    }
};

let listenMq = (custom) => {
    custom.listen(changeEvent, "trigger.event", (msg) => listenEventMsg(msg, "webhook"));
    custom.listen(changeLocal, "trigger.local", (msg) => listenPositionMsg(msg, "webhook"));
    custom.listen(changePower, "trigger.power", (msg) => listenPowerMsg(msg, "webhook"));
    // custom.listen(changeNetwork, "trigger.network", (msg) => listenNetworkMsg(msg, "position"));
};

let MQ = new mqClient(host, name, pwd, listenMq);
console.log("程序启动完成");