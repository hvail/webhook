/***
 * Created by hvail on 2017/11/15.
 */
const myUtil = require('./utils');
const util = require('util');
const request = require('request');
const router = {};
const queryList = "count,middle";
const debug = process.env.DEBUG || null;

const _showError = function (err, res, body) {
    if (err) {
        console.log("_showError");
        console.log(err);
    } else if (res && res.statusCode > 299) {
        console.log(res.request.body);
        console.log(body);
        console.log(res.request.href + ":" + res.statusCode);
        console.log("===============================================================");
    }
};

router.ProGetLastSingle = function (fn, sn) {
    return new Promise(function (resolve, reject) {
        let url = `${myUtil.RES_REDIS_HOST}/${fn}/single/${sn}`;
        request(url, function (err, res, body) {
            if (err) {
                console.log(`${url} -> ERROR : ${err.message}`);
                reject(err);
            } else if (res.statusCode > 399 || !body) {
                console.log(`${url} : ${res.statusCode}`);
                reject(body, res.statusCode);
            } else {
                if (typeof body === 'string' && (body[0] === '{' || body[0] === '['))
                    body = JSON.parse(body);
                resolve(body);
            }
        });
    });
};


router.SendBatch = function (host, uk, ids, cb) {
    let url = host + "/" + uk + "/batch/" + ids;
    request(url, function (err, res, body) {
        if (res && res.statusCode < 399) {
            let _body = JSON.parse(body);
            cb && cb(_body);
        } else {
            if (res) {
                console.log(url + " : " + (res && res.statusCode));
            } else {
                console.log(url);
                console.log(err);
            }
            cb && cb([]);
        }
    });
};

router.PostSingle = function (host, uk, data, cb) {
    let url = host + "/" + uk;
    request({url: url, method: "POST", json: data}, (err, res, body) => {
        if (res && res.statusCode < 399) {
            let _body = JSON.parse(body);
            cb && cb(_body);
        } else {
            console.log(url + " : " + (res && res.statusCode));
            cb && cb([]);
        }
    });
};

/***
 * 获取GET方法返回
 * @param host  区域
 * @param path  路径
 * @param query 查询体
 * @param result 查询体
 * @constructor
 */
router.DoGetPath = (host, path, result, query) => {
    return new Promise((resolve, rej) => {
        let url = `${host}/${path}`;
        debug && console.log("GET : " + url);
        request(url, (err, res, body) => {
            if (err || !body) {
                !result && rej(err);
                result && result.status(200).send("");
            } else {
                if (typeof body === 'string' && (body[0] === '{' || body[0] === '['))
                    body = JSON.parse(body);
                resolve(body);
            }
        });
    });
};

router.DoArraySave = function (fn, body, host) {
    let url = `${host}/${fn}/batch`;
    myUtil.Post(url, body, _showError);
    // myUtil.SendMqObject(`master.res.post.${fn}`, body, url);
};

/***
 * 单个保存存储区
 * @param body 保存主体
 * @param host 存放区域
 * @param fn   存放路径
 * @param cb   回调
 * @constructor
 */
router.DoPostSave = function (fn, body, host, cb) {
    let tag = `${host}/${fn}`;
    return myUtil.PromisePost(tag, body, (err, res, body) => {
        _showError(err, res, body);
        if (!err) cb && cb(err, res, body);
    });
};

router.ParseSn = function (sn) {
    return new Promise(function (resolve, reject) {
        if (/^\d{15}$/.test(sn)) {
            let url = `http://www.sky1088.com/imei/single/${sn}`;
            console.log(url);
            request(url, function (err, res, body) {
                if (err) reject(err);
                else {
                    resolve(body);
                }
            });
        } else {
            resolve(sn);
        }
    });
};

router.SendRangeUrl = function (uk, sn, start, end, res, query) {
    let url = myUtil.RES_OTS_HOST + "/" + uk + "/range/" + sn + "/" + start + "/" + end;
    let queryStr = "";
    for (let k in query) {
        if (query.hasOwnProperty(k))
            if (queryList.indexOf(k) > -1) {
                queryStr += ((!queryStr) ? "?" : "&") + k + "=" + query[k];
            }
    }
    if (queryStr) url += queryStr;
    return url;
};

router.Send = (msg, res) => {
    if (util.isNumber(msg)) {
        res.status(200).send('' + msg);
    } else
        res.status(200).send(msg);
};

module.exports = router;

