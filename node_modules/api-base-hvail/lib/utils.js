/***
 * Created by hvail on 2017/9/15.
 */
const request = require('request');
const REQUIRED = "required";
const area = process.env.DATAAREA;
const debug = process.env.DEBUG || null;
// const area = "en-us";
// const area = "zh-cn";

const MQ_RABBIT_HOST = "http://v3.mq-rabbit.server." + area + ".sky1088.com";
const MAN_MASTER_HOST = "http://v3.man.server." + area + ".sky1088.com";
const MAN_REDIS_HOST = "http://v3.manager-redis.server." + area + ".sky1088.com";
const MAN_MONGO_HOST = "http://v3.manager-mongo.server." + area + ".sky1088.com";
const MAN_MSSQL_HOST = "http://v3.manager-mssql.server." + area + ".sky1088.com";
const MAN_MYSQL_HOST = "http://v3.manager-mysql.server." + area + ".sky1088.com";
const RES_REDIS_HOST = "http://v3.res-redis.server." + area + ".sky1088.com";
const RES_MONGO_HOST = "http://v3.res-mongo.server." + area + ".sky1088.com";
const RES_MASTER_HOST = "http://v3.res.server." + area + ".sky1088.com";
const RES_OTS_HOST = "http://v3.res-ots.server." + area + ".sky1088.com";
const WEBHOOK_HOST = "http://webhook." + area + ".sky1088.com";
const TERMINAL_HOST = "http://master.m2m.sky1088.com";

const MqSendUrl = MQ_RABBIT_HOST + "/mq/send";
const MqExUrl = MQ_RABBIT_HOST + "/mq/send/ex";

let exMap = new Map();

let buildDateId = function () {
    return new Date().toISOString().replace(/\..+/g, '').replace(/T|-|:|Z/g, '').replace(' ', '');
};

let router = {
    BuildCommand: function (sn, cmd) {
        return {
            Target: sn,
            From: "res.master",
            Commands: cmd,
            Master: "master",
            Status: "building",
            MsgId: "30" + buildDateId()
        };
    }
};

let getHttpOptions = function (url, data) {
    return {
        url: url,
        method: "POST",
        json: true,
        headers: {
            'User-Agent': 'Data-Push HYZ hjjhvail@gmail.com'
        },
        body: data
    };
};

Array.prototype.last = function () {
    let me = this;
    return me[me.length - 1];
};

Array.prototype.first = function () {
    let me = this;
    return me[0];
};

Array.prototype.findByField = function (field, value) {
    let me = this;
    let result = [];
    for (let i = 0; i < me.length; i++) {
        let _mi = me[i];
        if (_mi.hasOwnProperty(field) && _mi[field] === value) {
            result.push(_mi);
        }
    }
    return result;
};

Array.prototype.getFieldValues = function (key) {
    let me = this;
    let result = [];
    for (let i = 0; i < me.length; i++) {
        let _mi = me[i];
        if (_mi.hasOwnProperty(key)) {
            result.push(_mi[key]);
        }
    }
    return result;
};

Array.prototype.joinFieldValues = function (key) {
    let me = this;
    let result = [];
    for (let i = 0; i < me.length; i++) {
        let _mi = me[i];
        if (_mi.hasOwnProperty(key)) {
            result.push(_mi[key]);
        }
    }
    return result.join(",");
};

/***
 * 批量设置数组内某一个字段
 * @param key
 * @param value
 */
Array.prototype.setAllKey = function (key, value) {
    let array = this;
    let result = [];
    for (let i = 0; i < array.length; i++) {
        let tmp = array[i];
        tmp[key] = value;
        result.push(tmp);
    }
    return result;
};

/***
 * 插入排序，适用于比较小的数组。复杂度为O(N*(N-1))
 * @constructor
 */
Array.prototype.InsertSort = function (key) {
    let array = this;
    let len = array.length,
        i, j, tmp, result;

    // 设置数组副本
    result = array.slice(0);
    for (i = 1; i < len; i++) {
        tmp = result[i];
        j = i - 1;
        while (j >= 0 && tmp[key] < result[j][key]) {
            result[j + 1] = result[j];
            j--;
        }
        result[j + 1] = tmp;
    }
    return result;
};

router.ProGetLastSingle = function (fn, sn) {
    return new Promise(function (resolve, reject) {
        let url = `${myUtil.RES_REDIS_HOST}/${fn}/single/${sn}`;
        request(url, function (err, res, body) {
            if (err) {
                console.log(`${url} -> ERROR : ${err.message}`);
                reject(err);
            } else if (res.statusCode > 399 || !body) {
                console.log(`${url} : ${res.statusCode}`);
                reject(body, res.statusCode);
            } else {
                if (typeof body === 'string' && (body[0] === '{' || body[0] === '['))
                    body = JSON.parse(body);
                resolve(body);
            }
        });
    });
};

/***
 * 从SRC复制到TAR ,
 * @param src
 * @param tar
 * @constructor
 * @return {{}}
 */
router.Clone = function (src, tar) {
    let clone = {};
    if (!tar) return null;
    for (let k in src) {
        if (src.hasOwnProperty(k))
            if (!!tar[k] && typeof(src[k]) === 'number') {
                clone[k] = isNaN(tar[k]) ? 0 : tar[k];
            } else {
                clone[k] = tar[k] || src[k];
            }
    }
    return clone;
};

router.ClassClone = function (src, tar, res) {
    let clone = {};
    for (let k in src) {
        if (src.hasOwnProperty(k)) {
            let m = src[k];
            if (m === REQUIRED && !tar[k]) {
                res.send(204, k + "is required");
                return null;
            }
            clone[k] = tar[k] || src[k];
        }
    }
    return clone;
};

router.Get = function (url, cb) {
    debug && console.log("GET : " + url);
    request(url, function (err, response, body) {
        if (err) console.log(err);
        if (err || (response && response.statusCode > 400)) {
            console.log(url);
            console.log(response && response.statusCode + " : " + body);
        }
        try {
            cb && cb(err, response, body);
        } catch (e) {
            console.log(e);
        }
    });
};

router.PromiseGet = function (url) {
    debug && console.log(`${debug} -- GET : ${url}`);
    // let _url = encodeURI(url);
    let fn = (done, reject) => {
        request(url, {method: "GET", charset: "utf-8"}, function (err, res, body) {
            if (err) reject(err, res, body);
            else done(body);
        });
    };
    return new Promise(fn).catch(err => {
        console.log(url);
        console.log(err);
        throw err;
    })
};

/***
 * POST 方法默认是json方式
 * @param url
 * @param data 是对象体，可以为空
 * @param cb
 * @constructor
 */
router.Post = function (url, data, cb) {
    debug && console.log("POST : " + url);
    debug && console.log(data);
    request(url, {method: "POST", json: data}, cb);
};

router.PromisePost = (url, data, cb) => {
    debug && console.log("POST : " + url);
    let fn = (done, reject) => {
        request(url, {method: "POST", json: data, charset: "utf-8"}, (err, res, body) => {
            cb && cb(err, res, body);
            if (err) reject(err, res, body);
            else done(body);
        });
    };
    return new Promise(fn);
};

router.Put = function (url, data, cb) {
    debug && console.log("Put : " + url);
    let fn = (done, reject) => {
        request(url, {method: "PUT", json: data}, (err, res, body) => {
            cb && cb(err, res, body);
            if (err) reject(err, res, body);
            else done(body);
        });
    };
    return new Promise(fn);
};

router.PromisePut = (url, data) => {
    debug && console.log("PUT : " + url);
    let fn = (done, reject) => {
        request(url, {method: "PUT", json: data}, (err, res, body) => {
            if (err) reject(err, res, body);
            else done(body);
        });
    };
    return new Promise(fn);
};

router.Delete = function (url, cb) {
    debug && console.log("DELETE : " + url);
    let fn = (done, reject) => {
        request({url: url, method: "DELETE"}, (err, res, body) => {
            cb && cb(err, res, body);
            if (err) reject(err, res, body);
            else done(body);
        });
    };
    return new Promise(fn);
};

router.PromiseDelete = (url, data) => {
    debug && console.log("DELETE : " + url);
    let fn = (done, reject) => {
        request(url, {method: "DELETE", json: data}, (err, res, body) => {
            if (err) reject(err, res, body);
            else done(body);
        });
    };
    return new Promise(fn);
};

router.MakePromise = (promise) => {
    return () => {
        return promise;
    }
};

router.SendMqObject = function (exchage, obj, target, cb) {
    let tag = exchage + "." + target;
    let push = {Exchange: exchage, MsgTag: tag, Context: JSON.stringify(obj)};
    request(getHttpOptions(MqSendUrl, push), function (err, res, body) {
        cb && cb(err, res, body);
    });
};

router.DoPushPost = function (url, data, cb) {
    request(getHttpOptions(url, data), function (err, res, body) {
        cb && cb(url, data, res.statusCode < 400 ? 1 : -1, body);
    });
};

/***
 * 直接方式的指令下发(测试通过)
 * @param cmd
 * @param cb
 * @constructor
 */
router.SendCommand = function (cmd, cb) {
    this.SendMqObject("hyz.program.command", cmd, cmd.Target, cb);
};

router.REQUIRED = REQUIRED;
router.MQ_RABBIT_HOST = MQ_RABBIT_HOST;
router.MAN_MASTER_HOST = MAN_MASTER_HOST;
router.MAN_REDIS_HOST = MAN_REDIS_HOST;
router.MAN_MONGO_HOST = MAN_MONGO_HOST;
router.MAN_MSSQL_HOST = MAN_MSSQL_HOST;
router.MAN_MYSQL_HOST = MAN_MYSQL_HOST;
router.RES_MASTER_HOST = RES_MASTER_HOST;
router.RES_REDIS_HOST = RES_REDIS_HOST;
router.RES_MONGO_HOST = RES_MONGO_HOST;
router.RES_OTS_HOST = RES_OTS_HOST;
router.TERMINAL_HOST = TERMINAL_HOST;
router.TWEBHOOK_HOST = WEBHOOK_HOST;
module.exports = router;